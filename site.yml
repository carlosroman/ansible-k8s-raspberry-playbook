---
- hosts: all
#  remote_user: pi
  gather_facts: yes
  become: true
  become_method: sudo
  tags:
    - upgrade

  tasks:
    - name: Upgrade all deps
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
    - name: Make sure installed/latest ca-certificates
      apt: 
        name: ca-certificates
        state: latest
    - name: Prerestart the box
      command: /sbin/shutdown -r +1
      async: 0
      poll: 0
    - name: Wait for PI to come back after upgrade
      local_action: wait_for
      args:
        host: "{{ ansible_ssh_host }}"
        port: 22
        state: started
        delay: 70
        timeout: 300

- hosts: all
  gather_facts: yes
  become: true
  become_method: sudo
  tags:
    - setup

  tasks:
    - name: Hostname to set
      debug:
        msg: 'Setting host to {{ inventory_hostname }}'
    - name: Set hostname
      hostname:
        name: '{{ inventory_hostname }}'
    - name: Set hostname in /etc/hosts
      replace:
        path: /etc/hosts
        regexp: 'raspberrypi'
        replace: '{{ inventory_hostname }}'
    - name: Update SSH to not DNS lookup
      replace:
        path: /etc/ssh/sshd_config
        regexp: '[#]UseDNS\s+[n][o]'
        replace: 'UseDNS no'
    - name: Disable swap
      shell: dphys-swapfile swapoff && dphys-swapfile uninstall && update-rc.d dphys-swapfile remove
    - name: Swap summary
      command: swapon --summary
    - name: Copy old cmdline.txt
      copy:
        src: /boot/cmdline.txt
        dest: /boot/cmdline.txt.bkup
        remote_src: yes
    - name: Add cpgroup flags
      replace:
        path: /boot/cmdline.txt
        regexp: 'rootwait$'
        replace: 'rootwait cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
    - name: restart the box
      command: /sbin/shutdown -r +1
      async: 0
      poll: 0
    - name: wait for PI to come back
      local_action: wait_for
      args:
        host: "{{ ansible_ssh_host }}"
        port: 22
        state: started
        delay: 70
        timeout: 300

- hosts: all
#  remote_user: pi
  gather_facts: yes
  become: true
  become_method: sudo
  tags:
    - install

  roles:
    - docker
    - { role: k8s, tags: ['k8s'] }

  tasks:
    - name: run docker
      command: docker ps
      register: install_docker_ps
      tags:
        - test
    - name: run docker
      debug:
        msg: '{{ install_docker_ps }}'
      tags:
        - test

  post_tasks:
    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes
    - name: Remove useless packages from the cache
      apt:
        autoclean: yes

- hosts: master
  gather_facts: yes
  become: true
  become_method: sudo
  tags:
    - k8s
    - install

  tasks:
    - name: Generate kubeadm token
      command: kubeadm token generate
      register: kubeadm_token_generate
    - name: Set kubeadm token
      set_fact: 
        kubeadm_token: '{{ kubeadm_token_generate.stdout }}'
    - name: Debug 'kubeadm init' info
      debug:
        msg: 'command to run: kubeadm init --token={{ kubeadm_token }} --apiserver-advertise-address={{ ansible_default_ipv4.address }}'
    - name: Kube init
      command: 'kubeadm init --token={{ kubeadm_token }} --apiserver-advertise-address={{ ansible_default_ipv4.address }}'
      register: kubeadm_init_command
    - name: kubeadm output
      debug:
        msg: '{{ kubeadm_init_command.stdout_lines }}'
    - name: Get k8s versio
      command: bash -c "kubectl version | base64 | tr -d '\n'"
      register: kubectl_version_command
    - name: Install weave
      command: "kubectl apply -f 'https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version_command.stdout }}'"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
    - name: Try kubectl
      command: kubectl get pods --namespace=kube-system
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: kubectl_get_pods 
    - name: Debug 'kubectl get pods'
      debug:
        msg: '{{ kubectl_get_pods.stdout_lines }}'
    - name: Get join command
      command: kubeadm token create --print-join-command
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: kubeadm_join_command_generate
      tags:
        - join

- hosts: nodes
  become: true
  become_method: sudo
  tags:
    - k8s
    - install
    - join

  tasks:
    - name: Join Cluster command
      debug:
        msg: "Command to run: {{ hostvars[groups['master'][0]].kubeadm_join_command_generate.stdout }}"
    - name: Join cluster
      command: "{{ hostvars[groups['master'][0]].kubeadm_join_command_generate.stdout }}"

- hosts: master
  gather_facts: yes
  become: true
  become_method: sudo
  tags:
    - k8s
    - test

  tasks:
    - name: Check everything works
      command: kubectl get nodes
      register: kubectl_check
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
    - name: Print kubectl check
      debug:
        msg: '{{ kubectl_check.stdout_lines }}'
